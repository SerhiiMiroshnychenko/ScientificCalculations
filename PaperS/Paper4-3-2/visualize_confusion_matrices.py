#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–∞—Ç—Ä–∏—Ü—å –ø–æ–º–∏–ª–æ–∫ —Ç–∞ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –æ–±–æ—Ö –¥–∞—Ç–∞—Å–µ—Ç—ñ–≤
–í–∫–ª—é—á–∞—î –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω—É –±–∞–∑–æ–≤—É –º–∞—Ç—Ä–∏—Ü—é –¥–ª—è –î–∞—Ç–∞—Å–µ—Ç—É 2
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import os

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ —à—Ä–∏—Ñ—Ç—É –¥–ª—è matplotlib
plt.rcParams['font.family'] = 'DejaVu Sans'
plt.rcParams['axes.unicode_minus'] = False


def calculate_metrics_from_confusion_matrix(tn, fp, fn, tp):
    """
    –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–µ—Ç—Ä–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –º–∞—Ç—Ä–∏—Ü—ñ –ø–æ–º–∏–ª–æ–∫
    """
    accuracy = (tp + tn) / (tp + tn + fp + fn)
    precision = tp / (tp + fp) if (tp + fp) > 0 else 0
    recall = tp / (tp + fn) if (tp + fn) > 0 else 0
    f1 = 2 * (precision * recall) / (precision + recall) if (precision + recall) > 0 else 0

    return {
        'accuracy': accuracy,
        'precision': precision,
        'recall': recall,
        'f1': f1
    }


def plot_confusion_matrix(tn, fp, fn, tp, title, ax):
    """
    –ü–æ–±—É–¥–æ–≤–∞ –º–∞—Ç—Ä–∏—Ü—ñ –ø–æ–º–∏–ª–æ–∫
    """
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ç—Ä–∏—Ü—ñ
    cm = np.array([[tn, fp], [fn, tp]])

    # –ü–æ–±—É–¥–æ–≤–∞ heatmap
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', ax=ax,
                xticklabels=['Predicted 0', 'Predicted 1'],
                yticklabels=['True 0', 'True 1'],
                cbar=False, annot_kws={'size': 16})

    ax.set_title(title, fontsize=14, fontweight='bold')
    ax.set_xlabel('Predicted Label', fontsize=12)
    ax.set_ylabel('True Label', fontsize=12)

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ —è–∫ –ø—ñ–¥–ø–∏—Å
    metrics = calculate_metrics_from_confusion_matrix(tn, fp, fn, tp)
    metrics_text = f"Acc: {metrics['accuracy']:.4f}\nPrec: {metrics['precision']:.4f}\nRec: {metrics['recall']:.4f}\nF1: {metrics['f1']:.4f}"
    ax.text(0.02, 0.98, metrics_text, transform=ax.transAxes,
            verticalalignment='top', bbox=dict(boxstyle='round', facecolor='white', alpha=0.8),
            fontsize=11)


def main():
    print("=== –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –º–∞—Ç—Ä–∏—Ü—å –ø–æ–º–∏–ª–æ–∫ –¥–ª—è –æ–±–æ—Ö –¥–∞—Ç–∞—Å–µ—Ç—ñ–≤ ===\n")

    # === –î–ê–¢–ê–°–ï–¢ 1 ===
    print("üìä –î–∞—Ç–∞—Å–µ—Ç 1 - –º–∞—Ç—Ä–∏—Ü—ñ –ø–æ–º–∏–ª–æ–∫:")

    # –ë–∞–∑–æ–≤–∞ –º–æ–¥–µ–ª—å (–∑ –ø–µ—Ä—à–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è - –í–ò–ü–†–ê–í–õ–ï–ù–û!)
    dataset1_baseline = {
        'TN': 8258, 'FP': 1352, 'FN': 496, 'TP': 15933,
        'title': 'Dataset 1: –ë–∞–∑–æ–≤–∞ (–≤—Å—ñ –æ–∑–Ω–∞–∫–∏)'
    }

    # –ü—ñ—Å–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó (–∑ –ø–µ—Ä—à–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è - –í–ò–ü–†–ê–í–õ–ï–ù–û!)
    dataset1_optimized = {
        'TN': 8439, 'FP': 1171, 'FN': 623, 'TP': 15806,
        'title': 'Dataset 1: –í—Å—ñ –æ–∑–Ω–∞–∫–∏ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—ñ'
    }

    # –ù–∞–π–∫—Ä–∞—â–∞ –º–æ–¥–µ–ª—å (–∑ –ø–µ—Ä—à–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è - –í–ò–ü–†–ê–í–õ–ï–ù–û!)
    dataset1_best = {
        'TN': 8447, 'FP': 1163, 'FN': 616, 'TP': 15813,
        'title': 'Dataset 1: –ù–∞–π–∫—Ä–∞—â—ñ–π –Ω–∞–±—ñ—Ä –æ–∑–Ω–∞–∫'
    }

    print(
        f"–ë–∞–∑–æ–≤–∞: TN={dataset1_baseline['TN']}, FP={dataset1_baseline['FP']}, FN={dataset1_baseline['FN']}, TP={dataset1_baseline['TP']}")
    print(
        f"–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞: TN={dataset1_optimized['TN']}, FP={dataset1_optimized['FP']}, FN={dataset1_optimized['FN']}, TP={dataset1_optimized['TP']}")
    print(
        f"–ù–∞–π–∫—Ä–∞—â–∞: TN={dataset1_best['TN']}, FP={dataset1_best['FP']}, FN={dataset1_best['FN']}, TP={dataset1_best['TP']}")

    # === –î–ê–¢–ê–°–ï–¢ 2 ===
    print(f"\nüìä –î–∞—Ç–∞—Å–µ—Ç 2 - –º–∞—Ç—Ä–∏—Ü—ñ –ø–æ–º–∏–ª–æ–∫:")

    # –ë–∞–∑–æ–≤–∞ –º–æ–¥–µ–ª—å (–≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞—à–∏–º —Å–∫—Ä–∏–ø—Ç–æ–º)
    dataset2_baseline = {
        'TN': 8246, 'FP': 1364, 'FN': 476, 'TP': 15953,
        'title': 'Dataset 2: –ë–∞–∑–æ–≤–∞ (–≤—Å—ñ –æ–∑–Ω–∞–∫–∏)'
    }

    # –ü—ñ—Å–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó (–∑ –¥—Ä—É–≥–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è)
    dataset2_optimized = {
        'TN': 8273, 'FP': 1337, 'FN': 472, 'TP': 15957,
        'title': 'Dataset 2: –í—Å—ñ –æ–∑–Ω–∞–∫–∏ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—ñ'
    }

    # –ù–∞–π–∫—Ä–∞—â–∞ –º–æ–¥–µ–ª—å (–∑ –¥—Ä—É–≥–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è)
    dataset2_best = {
        'TN': 8276, 'FP': 1334, 'FN': 456, 'TP': 15973,
        'title': 'Dataset 2: –ù–∞–π–∫—Ä–∞—â—ñ–π –Ω–∞–±—ñ—Ä –æ–∑–Ω–∞–∫'
    }

    print(
        f"–ë–∞–∑–æ–≤–∞ (–≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–∞): TN={dataset2_baseline['TN']}, FP={dataset2_baseline['FP']}, FN={dataset2_baseline['FN']}, TP={dataset2_baseline['TP']}")
    print(
        f"–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞: TN={dataset2_optimized['TN']}, FP={dataset2_optimized['FP']}, FN={dataset2_optimized['FN']}, TP={dataset2_optimized['TP']}")
    print(
        f"–ù–∞–π–∫—Ä–∞—â–∞: TN={dataset2_best['TN']}, FP={dataset2_best['FP']}, FN={dataset2_best['FN']}, TP={dataset2_best['TP']}")

    # === –í–Ü–ó–£–ê–õ–Ü–ó–ê–¶–Ü–Ø –ú–ê–¢–†–ò–¶–¨ –ü–û–ú–ò–õ–û–ö ===
    print(f"\nüé® –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–∞—Ç—Ä–∏—Ü—å –ø–æ–º–∏–ª–æ–∫...")

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—ñ–≥—É—Ä–∏ –∑ 6 –ø—ñ–¥–≥—Ä–∞—Ñ—ñ–∫–∞–º–∏ (2 —Ä—è–¥–∫–∏ x 3 —Å—Ç–æ–≤–ø—Ü—ñ)
    fig, axes = plt.subplots(2, 3, figsize=(18, 12))
    fig.suptitle('–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –º–∞—Ç—Ä–∏—Ü—å –ø–æ–º–∏–ª–æ–∫ –¥–ª—è –¥–≤–æ—Ö –¥–∞—Ç–∞—Å–µ—Ç—ñ–≤', fontsize=18, fontweight='bold')

    # –î–∞—Ç–∞—Å–µ—Ç 1
    datasets_1 = [dataset1_baseline, dataset1_optimized, dataset1_best]
    for i, data in enumerate(datasets_1):
        plot_confusion_matrix(data['TN'], data['FP'], data['FN'], data['TP'],
                              data['title'], axes[0, i])

    # –î–∞—Ç–∞—Å–µ—Ç 2
    datasets_2 = [dataset2_baseline, dataset2_optimized, dataset2_best]
    for i, data in enumerate(datasets_2):
        plot_confusion_matrix(data['TN'], data['FP'], data['FN'], data['TP'],
                              data['title'], axes[1, i])

    plt.tight_layout()
    plt.savefig('confusion_matrices_comparison.png',
                dpi=300, bbox_inches='tight')
    print("‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ: confusion_matrices_comparison.png")

    # === –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –ú–ï–¢–†–ò–ö ===
    print(f"\nüìà –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Ä—ñ–≤–Ω—è–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫–∞ –º–µ—Ç—Ä–∏–∫...")

    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –≤—Å—ñ—Ö –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π
    all_configs = [
        ('Dataset 1 - Baseline', dataset1_baseline),
        ('Dataset 1 - Optimized', dataset1_optimized),
        ('Dataset 1 - Best', dataset1_best),
        ('Dataset 2 - Baseline', dataset2_baseline),
        ('Dataset 2 - Optimized', dataset2_optimized),
        ('Dataset 2 - Best', dataset2_best)
    ]

    # –ó–±—ñ—Ä –º–µ—Ç—Ä–∏–∫
    metrics_data = []
    config_names = []

    for name, config in all_configs:
        metrics = calculate_metrics_from_confusion_matrix(
            config['TN'], config['FP'], config['FN'], config['TP']
        )
        metrics_data.append([
            metrics['accuracy'], metrics['precision'],
            metrics['recall'], metrics['f1']
        ])
        config_names.append(name)

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞—Ä–ø–ª–æ—Ç—É –º–µ—Ç—Ä–∏–∫
    metrics_to_plot = ['Accuracy', 'Precision', 'Recall', 'F1-score']
    x = np.arange(len(metrics_to_plot))
    bar_width = 0.13

    plt.figure(figsize=(14, 8))

    colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b']

    for i, (name, data) in enumerate(zip(config_names, metrics_data)):
        offset = (i - 2.5) * bar_width
        plt.bar(x + offset, data, width=bar_width, label=name, color=colors[i])

    plt.xlabel('–ú–µ—Ç—Ä–∏–∫–∏', fontsize=14)
    plt.ylabel('–ó–Ω–∞—á–µ–Ω–Ω—è', fontsize=14)
    plt.title('–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ –¥–ª—è –≤—Å—ñ—Ö –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π –æ–±–æ—Ö –¥–∞—Ç–∞—Å–µ—Ç—ñ–≤', fontsize=16)
    plt.xticks(x, metrics_to_plot)
    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.grid(True, alpha=0.3)
    plt.tight_layout()
    plt.savefig('metrics_comparison_barplot.png',
                dpi=300, bbox_inches='tight')
    print("‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ: metrics_comparison_barplot.png")

    # === –¢–ê–ë–õ–ò–¶–Ø –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø ===
    print(f"\nüìã –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è...")

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è DataFrame –∑ —É—Å—ñ–º–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    comparison_data = []

    for name, config in all_configs:
        metrics = calculate_metrics_from_confusion_matrix(
            config['TN'], config['FP'], config['FN'], config['TP']
        )

        comparison_data.append({
            'Configuration': name,
            'TN': config['TN'],
            'FP': config['FP'],
            'FN': config['FN'],
            'TP': config['TP'],
            'Accuracy': f"{metrics['accuracy']:.4f}",
            'Precision': f"{metrics['precision']:.4f}",
            'Recall': f"{metrics['recall']:.4f}",
            'F1-score': f"{metrics['f1']:.4f}"
        })

    df_comparison = pd.DataFrame(comparison_data)

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ CSV
    df_comparison.to_csv('all_configurations_comparison.csv',
                         index=False, encoding='utf-8')
    print("‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ: all_configurations_comparison.csv")

    # –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –≤ –∫–æ–Ω—Å–æ–ª—å
    print(f"\nüìä –ü–æ—Ä—ñ–≤–Ω—è–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –≤—Å—ñ—Ö –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π:")
    print(df_comparison.to_string(index=False))

    # === –ê–ù–ê–õ–Ü–ó –ü–û–ö–†–ê–©–ï–ù–¨ ===
    print(f"\nüîç –ê–Ω–∞–ª—ñ–∑ –ø–æ–∫—Ä–∞—â–µ–Ω—å:")

    # –î–∞—Ç–∞—Å–µ—Ç 1
    d1_base_metrics = calculate_metrics_from_confusion_matrix(
        dataset1_baseline['TN'], dataset1_baseline['FP'],
        dataset1_baseline['FN'], dataset1_baseline['TP']
    )
    d1_opt_metrics = calculate_metrics_from_confusion_matrix(
        dataset1_optimized['TN'], dataset1_optimized['FP'],
        dataset1_optimized['FN'], dataset1_optimized['TP']
    )
    d1_best_metrics = calculate_metrics_from_confusion_matrix(
        dataset1_best['TN'], dataset1_best['FP'],
        dataset1_best['FN'], dataset1_best['TP']
    )

    # –î–∞—Ç–∞—Å–µ—Ç 2
    d2_base_metrics = calculate_metrics_from_confusion_matrix(
        dataset2_baseline['TN'], dataset2_baseline['FP'],
        dataset2_baseline['FN'], dataset2_baseline['TP']
    )
    d2_opt_metrics = calculate_metrics_from_confusion_matrix(
        dataset2_optimized['TN'], dataset2_optimized['FP'],
        dataset2_optimized['FN'], dataset2_optimized['TP']
    )
    d2_best_metrics = calculate_metrics_from_confusion_matrix(
        dataset2_best['TN'], dataset2_best['FP'],
        dataset2_best['FN'], dataset2_best['TP']
    )

    print("–î–∞—Ç–∞—Å–µ—Ç 1 - –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≤—ñ–¥ –±–∞–∑–æ–≤–æ—ó –¥–æ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ—ó:")
    for metric in ['accuracy', 'precision', 'recall', 'f1']:
        improvement = d1_opt_metrics[metric] - d1_base_metrics[metric]
        print(f"  {metric}: {improvement:+.4f} ({improvement * 100:+.2f}%)")

    print("–î–∞—Ç–∞—Å–µ—Ç 1 - –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≤—ñ–¥ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ—ó –¥–æ –Ω–∞–π–∫—Ä–∞—â–æ—ó:")
    for metric in ['accuracy', 'precision', 'recall', 'f1']:
        improvement = d1_best_metrics[metric] - d1_opt_metrics[metric]
        print(f"  {metric}: {improvement:+.4f} ({improvement * 100:+.2f}%)")

    print("\n–î–∞—Ç–∞—Å–µ—Ç 2 - –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≤—ñ–¥ –±–∞–∑–æ–≤–æ—ó –¥–æ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ—ó:")
    for metric in ['accuracy', 'precision', 'recall', 'f1']:
        improvement = d2_opt_metrics[metric] - d2_base_metrics[metric]
        print(f"  {metric}: {improvement:+.4f} ({improvement * 100:+.2f}%)")

    print("–î–∞—Ç–∞—Å–µ—Ç 2 - –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≤—ñ–¥ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ—ó –¥–æ –Ω–∞–π–∫—Ä–∞—â–æ—ó:")
    for metric in ['accuracy', 'precision', 'recall', 'f1']:
        improvement = d2_best_metrics[metric] - d2_opt_metrics[metric]
        print(f"  {metric}: {improvement:+.4f} ({improvement * 100:+.2f}%)")

    print(f"\nüéØ –í–∏—Å–Ω–æ–≤–∫–∏:")
    print("‚úÖ –£—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–ª—è –≤—Å—ñ—Ö 6 –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π")
    print("‚úÖ –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–∞ –±–∞–∑–æ–≤–∞ –º–∞—Ç—Ä–∏—Ü—è –¥–ª—è –î–∞—Ç–∞—Å–µ—Ç—É 2 –ª–æ–≥—ñ—á–Ω–æ —É–∑–≥–æ–¥–∂–µ–Ω–∞")
    print("‚úÖ –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≤—ñ–¥ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ —Ç–∞ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ")
    print("‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ 3 —Ñ–∞–π–ª–∏: –º–∞—Ç—Ä–∏—Ü—ñ –ø–æ–º–∏–ª–æ–∫, –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –º–µ—Ç—Ä–∏–∫, —Ç–∞–±–ª–∏—Ü—è CSV")


if __name__ == "__main__":
    main()
