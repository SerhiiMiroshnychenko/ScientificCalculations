% Імпортуємо необхідні бібліотеки
% У MATLAB немає аналога numpy, тому використовуємо вбудовані функції

% Константи та вхідні дані
T_STANDARD = 273.15;  % К (0°C)

% Параметри задачі
mass = 0.5;  % кг
t2 = 1280;  % °C
% Нижня межа інтегрування - 0 К (для металургійних розрахунків)
T1 = 0;  % К
% Верхня межа - кінцева температура в Кельвінах
T2 = t2 + T_STANDARD;  % К

% Коефіцієнти для теплоємності (кДж/(кг·К))
a = 0.175;      % константа
b = 6e-5;       % коефіцієнт при T

fprintf('1. Вхідні дані:\n');
fprintf('   Маса шлаку: %.1f кг\n', mass);
fprintf('   Початкова температура: %.2f К\n', T1);
fprintf('   Кінцева температура: %.2f°C = %.2f К\n', t2, T2);
fprintf('   Теплоємність: c = %.3f + %.3e·T кДж/(кг·К)\n', a, b);

% Аналітичний метод
% Q = m·∫(c(T)·dT) = m·∫(a + b·T)·dT = m·(a·T + b·T²/2)
Q_analytical = mass * (...
        a * (T2 - T1) + ...          % Інтеграл від константи a
        b * (T2^2 - T1^2) / 2 ...    % Інтеграл від лінійного члена b·T
);

% Числовий метод (метод трапецій)
steps = 1000;  % кількість кроків інтегрування
T = linspace(T1, T2, steps);  % рівномірне розбиття інтервалу [T1, T2]
c = @(T) a + b*T;  % теплоємність як функція від T
Q_numerical = mass * trapz(T, arrayfun(c, T));

fprintf('\n2. Результати розрахунку теплоти:\n');
fprintf('\tАналітичний метод: %.3f кДж\n', Q_analytical);
fprintf('\tЧисловий метод: %.3f кДж\n', Q_numerical);
fprintf('\tРізниця між методами: %.6f кДж\n', abs(Q_analytical - Q_numerical));
relative_error = abs(Q_analytical - Q_numerical)/abs(Q_analytical)*100;
fprintf('\tВідносна похибка: %.6f%%\n', relative_error);

% Додатковий аналіз
fprintf('\n3. Аналіз складових теплоти (аналітичний метод):\n');
Q1 = mass * a * (T2 - T1);
Q2 = mass * b * (T2^2 - T1^2) / 2;
fprintf('\tВід константної складової (a·T): %.3f кДж (%.1f%%)\n', Q1, Q1/Q_analytical*100);
fprintf('\tВід лінійної складової (b·T²/2): %.3f кДж (%.1f%%)\n', Q2, Q2/Q_analytical*100);
